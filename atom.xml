<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魏阁的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-25T10:22:16.277Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>魏阁</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Handlebars.js模板引擎，你想知道的都在这里</title>
    <link href="http://yoursite.com/2017/12/25/handlebars/"/>
    <id>http://yoursite.com/2017/12/25/handlebars/</id>
    <published>2017-12-24T16:00:00.000Z</published>
    <updated>2017-12-25T10:22:16.277Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>Handlebars.js模板引擎是我们常用到的模板引擎，它是 JavaScript 一个语义模板库，通过对view和data的分离来快速构建web模板。它采用”Logic-less template”（无逻辑模版）的思路，在加载时被预编译，而不是到了客户端执行到代码时再去编译，这样可以保证模板加载和运行的速度。Handlebars兼容Mustache，你可以在Handlebars中导入Mustache模板。<br>本文对它的一些实用方法做了一些简单的总结，希望你在这里可以找到想用的方法。</p>
<a id="more"></a>
<h1 id="使用与安装"><a href="#使用与安装" class="headerlink" title="使用与安装"></a>使用与安装</h1><p>Handlebars的安装非常简单，你只需要从Github下载最新版本，你也可访问下面网址获取最新信息：<a href="http://handlebarsjs.com。" target="_blank" rel="external">http://handlebarsjs.com。</a></p>
<p>目前handlebars.js已经被许多项目广泛使用了，handlebars是一个纯JS库，因此你可以像使用其他JS脚本一样用script标签来包含handlebars.js<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type="text/javascript" src=".js/handlebars.js"&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>先来段实例看看</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//html片段</div><div class="line">&lt;div id='demo'&gt;&lt;/div&gt;</div><div class="line">&lt;script id="demo-template" type="text/x-handlebars-template"&gt;</div><div class="line">    &lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">//js片段 （这里以jquery的写法为例）</div><div class="line">//预编译模板</div><div class="line">var template = Handlebars.compile($("#demo-template").html());</div><div class="line">//输入模板（data为需要渲染的数据，如：&#123;"text":"Hello World!"&#125;）</div><div class="line">$("#demo").html(template(data));</div></pre></td></tr></table></figure>
<h2 id="handlebars-表达式"><a href="#handlebars-表达式" class="headerlink" title="handlebars 表达式"></a>handlebars 表达式</h2><p>Handlebars expressions是handlebars模板中最基本的单元，使用方法是加两个大括号&#123;&#123; expression &#125;&#125;, handlebars模板会自动匹配相应的数值，对象甚至是函数。<br>上例中&#123;&#123; title &#125;&#125;表示在上下文中找<code>title</code>属性，获取它的值。</p>
<h2 id="点分割表达式"><a href="#点分割表达式" class="headerlink" title="点分割表达式"></a>点分割表达式</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;&#123;&#123;article.title&#125;&#125;&lt;/h1&gt;</div></pre></td></tr></table></figure>
<p>当前上下文找<code>article</code>属性，再找它的<code>title</code>属性</p>
<h2 id="不转义表达式"><a href="#不转义表达式" class="headerlink" title="不转义表达式"></a>不转义表达式</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;&#123;&lt;p&gt;Hello World!&lt;/P&gt;&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>当有些内容不想被转义时，需要使用3个大括号包&#123;&#123;&#123;起来。</p>
<h1 id="Handlebar的表达式"><a href="#Handlebar的表达式" class="headerlink" title="Handlebar的表达式"></a>Handlebar的表达式</h1><h2 id="Block表达式"><a href="#Block表达式" class="headerlink" title="Block表达式"></a>Block表达式</h2><p>有时候当你需要对某条表达式进行更深入的操作时，Blocks就派上用场了，在Handlebars中，你可以在表达式后面跟随一个#号来表示Blocks，然后通过&#123;&#123; 表达式 &#125;&#125;来结束Blocks。 如果当前的表达式是一个数组，则Handlebars会“自动展开数组”，并将Blocks的上下文设为数组中的元素。 例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">&#123;&#123;#programme&#125;&#125;</div><div class="line">    &lt;li&gt;&#123;&#123;language&#125;&#125;&lt;/li&gt;</div><div class="line">&#123;&#123;/programme&#125;&#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>有以下json数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  programme: [</div><div class="line">    &#123;language: <span class="string">"JavaScript"</span>&#125;,</div><div class="line">    &#123;language: <span class="string">"HTML"</span>&#125;,</div><div class="line">    &#123;language: <span class="string">"CSS"</span>&#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译模板代码会自动匹配<code>programme</code>数据并展开数据，渲染DOM后就是这样的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li&gt;JavaScript&lt;/li&gt;</div><div class="line">  &lt;li&gt;HTML&lt;/li&gt;</div><div class="line">  &lt;li&gt;CSS&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<h1 id="Handlebars的内置块表达式（Block-helper）"><a href="#Handlebars的内置块表达式（Block-helper）" class="headerlink" title="Handlebars的内置块表达式（Block helper）"></a>Handlebars的内置块表达式（Block helper）</h1><h2 id="1-each-block-helper"><a href="#1-each-block-helper" class="headerlink" title="1.each block helper"></a>1.each block helper</h2><p>你可以使用内置的&#123;&#123; each &#125;&#125; helper遍历列表块内容，用<code>this</code>来引用遍历的元素 例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &#123;&#123;#each name&#125;&#125;</div><div class="line">        &lt;li&gt;&#123;&#123;this&#125;&#125;&lt;/li&gt;</div><div class="line">    &#123;&#123;/each&#125;&#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>对应适用的json数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    name: [<span class="string">"html"</span>,<span class="string">"css"</span>,<span class="string">"javascript"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的<code>this</code>指的是数组里的每一项元素，和上面的Block很像，但原理是不一样的这里的<code>name</code>是数组，而内置的<code>each</code>就是为了遍历数组用的，更复杂的数据也同样适用。</p>
<p>通过<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;@index&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>可以引用当前的循环索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;<span class="comment">#each array&#125;&#125;</span></div><div class="line">  &#123;&#123;@index&#125;&#125;: &#123;&#123;this&#125;&#125;</div><div class="line">&#123;&#123;/each&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;@key&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>可以引用当前的键名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;<span class="comment">#each object&#125;&#125;</span></div><div class="line">  &#123;&#123;@key&#125;&#125;: &#123;&#123;this&#125;&#125;</div><div class="line">&#123;&#123;/each&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>数组迭代的第一步和最后一步用 <code>@first</code> 和 <code>@last</code> 变量表示， 对象迭代时仅 <code>@first</code> 可用。</p>
<h2 id="2-with-block-helper"><a href="#2-with-block-helper" class="headerlink" title="2.with block helper"></a>2.with block helper</h2><p>&#123;&#123; #with &#125;&#125;命令可以让当前的上下文进入到一个属性中,这个方法在操作复杂的template时候非常有用。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class="entry"&gt;</div><div class="line">  &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</div><div class="line">  &#123;&#123;#with author&#125;&#125;</div><div class="line">  &lt;h2&gt;By &#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;&lt;/h2&gt;</div><div class="line">  &#123;&#123;/with&#125;&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>对应适用json数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  title: <span class="string">"My first post!"</span>,</div><div class="line">  author: &#123;</div><div class="line">    firstName: <span class="string">"Charles"</span>,</div><div class="line">    lastName: <span class="string">"Jolley"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>渲染DOM后<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class="entry"&gt;</div><div class="line">  &lt;h1&gt;My first post!&lt;/h1&gt;</div><div class="line">  &lt;h2&gt;By Charles Jolley&lt;/h2&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="with-进入到某个属性-进入到某个上下文环境-："><a href="#with-进入到某个属性-进入到某个上下文环境-：" class="headerlink" title="with-进入到某个属性(进入到某个上下文环境)："></a>with-进入到某个属性(进入到某个上下文环境)：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">html片段</div><div class="line">&lt;table&gt;</div><div class="line">   &lt;thead&gt;</div><div class="line">     &lt;tr&gt;</div><div class="line">       &lt;th&gt;姓名&lt;/th&gt;</div><div class="line">       &lt;th&gt;性别&lt;/th&gt;</div><div class="line">       &lt;th&gt;年龄&lt;/th&gt;</div><div class="line">       &lt;th&gt;兴趣爱好&lt;/th&gt;</div><div class="line">     &lt;/tr&gt;</div><div class="line">   &lt;/thead&gt;</div><div class="line">   &lt;tbody id="tableList"&gt;</div><div class="line"></div><div class="line">   &lt;/tbody&gt;</div><div class="line">   &lt;script id="table-template" type="text/x-handlebars-template"&gt;</div><div class="line">       &#123;&#123;#each this&#125;&#125;</div><div class="line">         &lt;tr&gt;</div><div class="line">           &lt;td&gt;&#123;&#123;name&#125;&#125;&lt;/td&gt;</div><div class="line">           &lt;td&gt;&#123;&#123;sex&#125;&#125;&lt;/td&gt;</div><div class="line">           &lt;td&gt;&#123;&#123;age&#125;&#125;&lt;/td&gt;</div><div class="line">           &lt;td&gt;</div><div class="line">             &#123;&#123;#with favorite&#125;&#125;</div><div class="line">               &#123;&#123;#each this&#125;&#125;</div><div class="line">                 &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;</div><div class="line">               &#123;&#123;/each&#125;&#125;</div><div class="line">             &#123;&#123;/with&#125;&#125;</div><div class="line">           &lt;/td&gt;</div><div class="line">         &lt;/tr&gt;</div><div class="line">       &#123;&#123;/each&#125;&#125;</div><div class="line">   &lt;/script&gt;</div><div class="line"> &lt;/table&gt;</div></pre></td></tr></table></figure>
<p>对应适用json数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      <span class="string">"name"</span>: <span class="string">"张三"</span>,</div><div class="line">      <span class="string">"sex"</span>: <span class="string">"0"</span>,</div><div class="line">      <span class="string">"age"</span>: <span class="number">18</span>,</div><div class="line">      <span class="string">"favorite"</span>:</div><div class="line">      [</div><div class="line">      &#123;</div><div class="line">         <span class="string">"name"</span>:<span class="string">"唱歌"</span></div><div class="line">       &#125;,&#123;</div><div class="line">         <span class="string">"name"</span>:<span class="string">"篮球"</span></div><div class="line">       &#125;</div><div class="line">     ]</div><div class="line"> &#125;,</div><div class="line">&#123;</div><div class="line">     <span class="string">"name"</span>: <span class="string">"李四"</span>,</div><div class="line">     <span class="string">"sex"</span>: <span class="string">"0"</span>,</div><div class="line">     <span class="string">"age"</span>: <span class="number">22</span>,</div><div class="line">     <span class="string">"favorite"</span>:</div><div class="line">     [</div><div class="line">       &#123;</div><div class="line">         <span class="string">"name"</span>:<span class="string">"上网"</span></div><div class="line">      &#125;,&#123;</div><div class="line">         <span class="string">"name"</span>:<span class="string">"足球"</span></div><div class="line">      &#125;</div><div class="line">     ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="with-终极this应用："><a href="#with-终极this应用：" class="headerlink" title="with-终极this应用："></a>with-终极this应用：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">html片段</div><div class="line">&lt;table&gt;</div><div class="line">   &lt;thead&gt;</div><div class="line">     &lt;tr&gt;</div><div class="line">       &lt;th&gt;姓名&lt;/th&gt;</div><div class="line">       &lt;th&gt;性别&lt;/th&gt;</div><div class="line">       &lt;th&gt;年龄&lt;/th&gt;</div><div class="line">       &lt;th&gt;兴趣爱好&lt;/th&gt;</div><div class="line">     &lt;/tr&gt;</div><div class="line">   &lt;/thead&gt;</div><div class="line">   &lt;tbody id="tableList"&gt;</div><div class="line"></div><div class="line">   &lt;/tbody&gt;</div><div class="line">   &lt;script id="table-template" type="text/x-handlebars-template"&gt;</div><div class="line">       &#123;&#123;#each this&#125;&#125;</div><div class="line">         &lt;tr&gt;</div><div class="line">           &lt;td&gt;&#123;&#123;name&#125;&#125;&lt;/td&gt;</div><div class="line">           &lt;td&gt;&#123;&#123;sex&#125;&#125;&lt;/td&gt;</div><div class="line">           &lt;td&gt;&#123;&#123;age&#125;&#125;&lt;/td&gt;</div><div class="line">           &lt;td&gt;</div><div class="line">             &#123;&#123;#with favorite&#125;&#125;</div><div class="line">               &#123;&#123;#each this&#125;&#125;</div><div class="line">                 &lt;p&gt;&#123;&#123;this&#125;&#125;&lt;/p&gt;</div><div class="line">               &#123;&#123;/each&#125;&#125;</div><div class="line">             &#123;&#123;/with&#125;&#125;</div><div class="line">           &lt;/td&gt;</div><div class="line">         &lt;/tr&gt;</div><div class="line">       &#123;&#123;/each&#125;&#125;</div><div class="line">   &lt;/script&gt;</div><div class="line"> &lt;/table&gt;</div></pre></td></tr></table></figure>
<p>对应适用json数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      <span class="string">"name"</span>: <span class="string">"张三"</span>,</div><div class="line">      <span class="string">"sex"</span>: <span class="string">"0"</span>,</div><div class="line">      <span class="string">"age"</span>: <span class="number">18</span>,</div><div class="line">      <span class="string">"favorite"</span>:</div><div class="line">      [</div><div class="line">          <span class="string">"唱歌"</span>,</div><div class="line">          <span class="string">"篮球"</span></div><div class="line">      ]</div><div class="line"> &#125;,</div><div class="line">&#123;</div><div class="line">     <span class="string">"name"</span>: <span class="string">"李四"</span>,</div><div class="line">     <span class="string">"sex"</span>: <span class="string">"0"</span>,</div><div class="line">     <span class="string">"age"</span>: <span class="number">22</span>,</div><div class="line">     <span class="string">"favorite"</span>:</div><div class="line">     [</div><div class="line">          <span class="string">"上网"</span>,</div><div class="line">          <span class="string">"足球"</span></div><div class="line">     ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-if-else-block-helper"><a href="#3-if-else-block-helper" class="headerlink" title="3.if else block helper"></a>3.if else block helper</h2><p>&#123;&#123; #if &#125;&#125;就你使用JavaScript一样，你可以指定条件渲染DOM，如果它的参数返回false，undefined, null, “” 或者 [] (a “falsy” value), Handlebar将不会渲染DOM，如果存在&#123;&#123; else &#125;&#125;则执行&#123;&#123; else &#125;&#125;后面的渲染<br>例如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;#if list&#125;&#125;</div><div class="line">&lt;ul id="list"&gt;</div><div class="line">    &#123;&#123;#each list&#125;&#125;</div><div class="line">        &lt;li&gt;&#123;&#123;this&#125;&#125;&lt;/li&gt;</div><div class="line">    &#123;&#123;/each&#125;&#125;</div><div class="line">&lt;/ul&gt;</div><div class="line">&#123;&#123;else&#125;&#125;</div><div class="line">    &lt;p&gt;&#123;&#123;error&#125;&#125;&lt;/p&gt;</div><div class="line">&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>对应适用json数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var data = &#123;</div><div class="line">    info:[<span class="string">'HTML5'</span>,<span class="string">'CSS3'</span>,<span class="string">"WebGL"</span>],</div><div class="line">    <span class="string">"error"</span>:<span class="string">"数据取出错误"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里&#123;&#123; #if &#125;&#125;判断是否存在<code>list</code>数组，如果存在则遍历<code>list</code>，如果不存在输出错误信息。</p>
<h2 id="4-unless-block-helper"><a href="#4-unless-block-helper" class="headerlink" title="4.unless block helper"></a>4.unless block helper</h2><p>&#123;&#123; unless &#125;&#125;这个语法是反向的<code>if</code>语法也就是当判断的值为<code>false</code>时他会渲染DOM 例如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;#unless data&#125;&#125;</div><div class="line">&lt;ul id="list"&gt;</div><div class="line">    &#123;&#123;#each list&#125;&#125;</div><div class="line">        &lt;li&gt;&#123;&#123;this&#125;&#125;&lt;/li&gt;</div><div class="line">    &#123;&#123;/each&#125;&#125;</div><div class="line">&lt;/ul&gt;</div><div class="line">&#123;&#123;else&#125;&#125;</div><div class="line">    &lt;p&gt;&#123;&#123;error&#125;&#125;&lt;/p&gt;</div><div class="line">&#123;&#123;/unless&#125;&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Handlebars的访问（Path）"><a href="#Handlebars的访问（Path）" class="headerlink" title="Handlebars的访问（Path）"></a>Handlebars的访问（Path）</h1><p>Handlebar支持路径和mustache,Handlebar还支持嵌套的路径，使得能够查找嵌套低于当前上下文的属性可以通过<code>.</code>来访问属性,也可以使用<code>../</code>,来访问父级属性。 例如:（使用<code>.</code>访问的例子）<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;&#123;&#123;author.id&#125;&#125;&lt;/h1&gt;</div></pre></td></tr></table></figure></p>
<p>对应json数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  title: <span class="string">"My First Blog Post!"</span>,</div><div class="line">  author: &#123;</div><div class="line">    id: <span class="number">47</span>,</div><div class="line">    name: <span class="string">"Yehuda Katz"</span></div><div class="line">  &#125;,</div><div class="line">  body: <span class="string">"My first post. Wheeeee!"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>例如：（使用<code>../</code>访问）<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;#with person&#125;&#125;</div><div class="line">    &lt;h1&gt;&#123;&#123;../company.name&#125;&#125;&lt;/h1&gt;</div><div class="line">&#123;&#123;/with&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>对应适用json数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"person"</span>:</div><div class="line">    &#123; <span class="string">"name"</span>: <span class="string">"Alan"</span> &#125;,</div><div class="line">        company:</div><div class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Rad, Inc."</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="自定义helper"><a href="#自定义helper" class="headerlink" title="自定义helper"></a>自定义helper</h1><p>很多时候，我们需要更加复杂的<code>if</code>判断逻辑，显然默认的<code>if</code>不能满足我们的需求。这时你可以使用Handlebars.registerHelper()方法来注册一个<code>helper</code>。<br>先看一个例子：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">html片段</div><div class="line"> &lt;script id="table-template" type="text/x-handlebars-template"&gt;</div><div class="line">   &#123;&#123;#each student&#125;&#125;</div><div class="line">     &#123;&#123;#if name&#125;&#125;</div><div class="line">       &#123;&#123;#compare age 20&#125;&#125;</div><div class="line">         &lt;tr&gt;</div><div class="line">           &lt;td&gt;&#123;&#123;name&#125;&#125;&lt;/td&gt;</div><div class="line">           &lt;td&gt;&#123;&#123;transformat sex&#125;&#125;&lt;/td&gt;</div><div class="line">           &lt;td&gt;&#123;&#123;age&#125;&#125;&lt;/td&gt;</div><div class="line">         &lt;/tr&gt;</div><div class="line">       &#123;&#123;else&#125;&#125;</div><div class="line">         &lt;tr&gt;</div><div class="line">           &lt;td&gt;?&lt;/td&gt;</div><div class="line">           &lt;td&gt;?&lt;/td&gt;</div><div class="line">           &lt;td&gt;?&lt;/td&gt;</div><div class="line">         &lt;/tr&gt;</div><div class="line">       &#123;&#123;/compare&#125;&#125;</div><div class="line">     &#123;&#123;/if&#125;&#125;</div><div class="line">   &#123;&#123;/each&#125;&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">js片段：</div><div class="line">//注册一个比较大小的Helper,判断v1是否大于v2</div><div class="line"> Handlebars.registerHelper("compare",function(v1,v2,options)&#123;</div><div class="line">   if(v1&gt;v2)&#123;</div><div class="line">     //满足添加继续执行</div><div class="line">     return options.fn(this);</div><div class="line">   &#125;else&#123;</div><div class="line">     //不满足条件执行&#123;&#123;else&#125;&#125;部分</div><div class="line">     return options.inverse(this);</div><div class="line">   &#125;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"> //注册一个翻译用的Helper，0翻译成男，1翻译成女</div><div class="line"> Handlebars.registerHelper("transformat",function(value)&#123;</div><div class="line">   if(value==0)&#123;</div><div class="line">     return "男";</div><div class="line">   &#125;else if(value==1)&#123;</div><div class="line">     return "女";</div><div class="line">   &#125;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line">json数据:</div><div class="line">&#123;</div><div class="line">     "student": [</div><div class="line">         &#123;</div><div class="line">             "name": "张三",</div><div class="line">             "sex": "0",</div><div class="line">             "age": 23</div><div class="line">         &#125;,</div><div class="line">         &#123;</div><div class="line">             "sex": "0",</div><div class="line">             "age": 22</div><div class="line">         &#125;,</div><div class="line">         &#123;</div><div class="line">             "name": "妞妞",</div><div class="line">             "sex": "1",</div><div class="line">             "age": 18</div><div class="line">         &#125;</div><div class="line">     ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>本例中，利用Handlebars.js中Helper强大的扩展性，定义了一个<code>compare</code>，它用来比较两个数的大小，如果第一个数大于第二个数，满足条件继续执行，否则执行&#123;&#123; else &#125;&#125;部分。</p>
<p>Handlebars.registerHelper用来定义Helper，它有两个参数，第一个参数是Helper名称，第二个参数是一个回调函数，用来执行核心业务逻辑。本例中的函数，有三个参数，其中前两个参数是需要比较的两个数，第三个参数是固定的，就叫<code>options</code>，如果加了该参数，就说明这个Helper是一个Block，块级别的Helper，有一定的语法结构，调用的时候加#号，就像<code>if</code>那样。</p>
<p>关于<code>options</code>的使用，我所了解的就是这种用法，<code>return options.fn(this);</code>表示满足条件继续执行，也就是执行&#123;&#123;&#35; compare &#125;&#125;和&#123;&#123; else &#125;&#125;之间的代码；<code>return options.inverse(this);</code>表示不满足条件，也就是执行&#123;&#123; else &#125;&#125;和&#123;&#123; /compare &#125;&#125;之间的代码。</p>
<p>由于这是一个块级别的Helper，所以调用要加#，例如：&#123;&#123; #compare age 20 &#125;&#125;，其中的age就是当前上下文中读取到的年龄，20是我随便写的值，意思是只要age比20大，就显示，否则全显示?。</p>
<p>可以看出，Helper中写的可以是任何js代码，现在想想，就知道Handlebars有多灵活了吧！！</p>
<p>上面注册的两个Helper，一个带options参数，另一个不带；带options参数的Helper是块级别的，而不带的，相当于行内级别的Helper。</p>
<p>从例子一开始，性别就是用0、1代码表示的，但实际情况下我们需要转换成汉字，<code>transformat</code>这个Helper需要一个参数，根据不同的代码，返回男女，这样调用&#123;&#123; transformat sex &#125;&#125;，其中sex是从当前上下文中读取的性别代码。</p>
<h1 id="内建工具"><a href="#内建工具" class="headerlink" title="内建工具"></a>内建工具</h1><h2 id="转义字符串"><a href="#转义字符串" class="headerlink" title="转义字符串"></a>转义字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Handlebars.Utils.escapeExpression(string)</div></pre></td></tr></table></figure>
<h2 id="判断空值"><a href="#判断空值" class="headerlink" title="判断空值"></a>判断空值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Handlebars.Utils.isEmpty(value)</div></pre></td></tr></table></figure>
<h2 id="扩展对象"><a href="#扩展对象" class="headerlink" title="扩展对象"></a>扩展对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Handlebars.Utils.extend(foo, &#123;bar: true&#125;)</div></pre></td></tr></table></figure>
<h2 id="转字符串"><a href="#转字符串" class="headerlink" title="转字符串"></a>转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Handlebars.Utils.toString(obj)</div></pre></td></tr></table></figure>
<h2 id="判断数组"><a href="#判断数组" class="headerlink" title="判断数组"></a>判断数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Handlebars.Utils.isArray(obj)</div></pre></td></tr></table></figure>
<h2 id="判断函数"><a href="#判断函数" class="headerlink" title="判断函数"></a>判断函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Handlebars.Utils.isFunction(obj)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Handlebars.js模板引擎是我们常用到的模板引擎，它是 JavaScript 一个语义模板库，通过对view和data的分离来快速构建web模板。它采用”Logic-less template”（无逻辑模版）的思路，在加载时被预编译，而不是到了客户端执行到代码时再去编译，这样可以保证模板加载和运行的速度。Handlebars兼容Mustache，你可以在Handlebars中导入Mustache模板。&lt;br&gt;本文对它的一些实用方法做了一些简单的总结，希望你在这里可以找到想用的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Handlebars" scheme="http://yoursite.com/tags/Handlebars/"/>
    
  </entry>
  
  <entry>
    <title>vue 状态管理的一点思考</title>
    <link href="http://yoursite.com/2017/09/27/vue-state-management/"/>
    <id>http://yoursite.com/2017/09/27/vue-state-management/</id>
    <published>2017-09-26T16:00:00.000Z</published>
    <updated>2017-09-27T06:45:07.640Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>最近在写项目的时候碰到一个场景：一个地图应用，有个侧边栏，侧边栏里面放着很多选项，选项改变的时候，应用会根据侧边栏的条件请求数据，然后在地图上放 markers 。</p>
<a id="more"></a>
<p>页面可以简单抽象成如下结构：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// App.vue</div><div class="line"></div><div class="line">&lt;div&gt;</div><div class="line">  &lt;sidebar&gt;&lt;/sidebar&gt;</div><div class="line">  &lt;map&gt;&lt;/map&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>有很多种方式可以来完成上面的需求，我先介绍 2 种常见的做法，最后再给出一个比较另类但很有趣的方案。</p>
<h2 id="1-直接上-vuex"><a href="#1-直接上-vuex" class="headerlink" title="1.直接上 vuex"></a>1.直接上 vuex</h2><p>通常来讲，有多个组件共享状态的时候，把共享的状态丢给 vuex 来处理是个不错的方案。但是在处理上面那个场景的时候，会显示的有点「笨重」，因为侧边栏实际上是一个表单，<strong>如果使用 vuex 的话，就需要为每个选项定义一套 mutation，失去了直接使用 v-model 的便利</strong>。</p>
<p>直接使用组件状态绑定一个选项</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// sidebar.vue</div><div class="line"></div><div class="line">&lt;input v-model=<span class="string">"message"</span>&gt;</div><div class="line">// ...</div><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    message: <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当使用 vuex 绑定一个选项时，多了不少「模板」代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// 定义 state, mutation</div><div class="line"></div><div class="line">state: &#123;</div><div class="line">  message: ''</div><div class="line">&#125;,</div><div class="line">mutations: &#123;</div><div class="line">  updateMessage (state, message) &#123;</div><div class="line">    state.message = message</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// sidebar.vue</div><div class="line"></div><div class="line">&lt;input :value="message" @input="updateMessage"&gt;</div><div class="line">// ...</div><div class="line">computed: &#123;</div><div class="line">  ...mapState(&#123;</div><div class="line">    message: state =&gt; state.message</div><div class="line">  &#125;)</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  updateMessage (e) &#123;</div><div class="line">    this.$store.commit('updateMessage', e.target.value)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-将状态放到父组件上"><a href="#2-将状态放到父组件上" class="headerlink" title="2.将状态放到父组件上"></a>2.将状态放到父组件上</h2><p>如果 sidebar 和 map 有一个共同的父级，使用这种方式处理起来会比上面的简单很多。但是当我们的应用越来越大的时候，往往会把 sidebar 和 map 拆成颗粒度更小的组件，那么通过 props 一层层传给子组件也会变的非常麻烦。</p>
<h2 id="3-将组件状态「共享」出来"><a href="#3-将组件状态「共享」出来" class="headerlink" title="3.将组件状态「共享」出来"></a>3.将组件状态「共享」出来</h2><p>我们通常把组件内的状态写成下面这种形式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// ...</div><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">     message: <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际上，我们可以把 data () {} 中返回的对象单独提取到外面，作为一个变量，像下面这种写法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const state = &#123; message: <span class="string">''</span> &#125;</div><div class="line">// ...</div><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> state</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>那么在这个组件初始化过程中，state 对象会被 vue 「响应式化」，这会引出一个有趣的事情：任何组件，只要模版中使用了 state.message ，当 state.message 改变时，页面都会被同步更新</strong>。</p>
<p>知道了这个之后，我们就可以将侧边栏的状态写成一个独立的文件，作为一个模块引入其他组件中，结构如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// state.js</div><div class="line">export default &#123; message: '' &#125;</div><div class="line"></div><div class="line"></div><div class="line">// sidebar.vue</div><div class="line">&lt;input v-model="state.message" /&gt;</div><div class="line"></div><div class="line">import state from 'path/to/state.js'</div><div class="line">// ...</div><div class="line">data () &#123;</div><div class="line">  return &#123; state &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// map.vue</div><div class="line">// 在模版中使用侧边栏的状态</div><div class="line">&lt;div&gt;&#123;&#123; state.message &#125;&#125;&lt;/div&gt;</div><div class="line"></div><div class="line">import state from 'path/to/state.js'</div><div class="line">// ...</div><div class="line">data () &#123;</div><div class="line">  return &#123; state &#125;</div><div class="line">&#125;,</div><div class="line">created () &#123;</div><div class="line">  // 将侧边栏的状态作为参数去请求数据</div><div class="line">  axios.get('/xxxx', &#123; params: state &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样做的一个好处是，既可以在 sidebar.vue 中把 state 当作「内部」状态，愉快的使用 v-model 绑定数据，map.vue 中也可以方便的拿到 state 做为参数请求，同时还可以直接在 map.vue 的模版中使用 <code>state.message</code>。</p>
<h4 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h4><p>上面的方案中，state「响应式化」是发生在子组件初始化的过程中，我希望能在应用开始的时候，主动在某个时刻完成这一步。这个时候就可以借助 Vue 构造函数，像下面这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// store.js</div><div class="line"></div><div class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'path/to/state.js'</span></div><div class="line"></div><div class="line">new Vue(&#123;</div><div class="line">  data: &#123;</div><div class="line">    state</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>然后在主文件 main.js 中引入 store.js，state 就会被「响应式化」。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文阐述了在这个特定场景下，对于如何管理侧边栏状态的一些思考，希望大家看完后有所收获 :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;最近在写项目的时候碰到一个场景：一个地图应用，有个侧边栏，侧边栏里面放着很多选项，选项改变的时候，应用会根据侧边栏的条件请求数据，然后在地图上放 markers 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>深入浏览器渲染原理(一) — 浏览器渲染DOM过程</title>
    <link href="http://yoursite.com/2017/09/27/browser-rendering/"/>
    <id>http://yoursite.com/2017/09/27/browser-rendering/</id>
    <published>2017-09-26T16:00:00.000Z</published>
    <updated>2017-09-27T07:38:14.181Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>当访问一个网站的时候需要加载html，一个完整的html结构包含：dom树、文档、图片和媒体资源、样式css资源和脚本js资源。然后我们提出一个疑问:浏览器是如何加载（渲染）html的？</p>
<a id="more"></a>
<p>先看下面的html代码在渲染的时候弹出的是什么？并且注意图片是什么时候出来的？<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset="UTF-8"&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var box1 = document.getElementById('box')</div><div class="line">    alert("第一次alert：" + box1)</div><div class="line">    window.onload = function()&#123;</div><div class="line">        var box2 = document.getElementById('box')</div><div class="line">        alert("第二次alert：" + box2)</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id="box"&gt;</div><div class="line">        &lt;h1&gt;测试代码&lt;/h1&gt;</div><div class="line">        &lt;img src="img/logo.png" alt=""&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var box3 = document.getElementById('box')</div><div class="line">    alert("第三次alert：" + box3)</div><div class="line">    document.addEventListener('DOMContentLoaded', function()&#123;</div><div class="line">        var box4 = document.getElementById('box')</div><div class="line">        alert("第四次alert：" + box4)</div><div class="line">    &#125;, false)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 弹出的顺序为</div><div class="line">第一次alert：null</div><div class="line">第三次alert：[object HTMLDivElement]</div><div class="line">第四次alert：[object HTMLDivElement]</div><div class="line">第二次alert：[object HTMLDivElement]</div></pre></td></tr></table></figure>
<p>在第一次打开浏览器的时候，如果你注意的话，首先会弹出1、3，之后出现图片和弹出4，最后弹出2。如果你对浏览器的渲染不了解的话，看到这样的结果你也许会很纳闷，下面我就带大家来看看上面我们提到的三个问题。</p>
<h2 id="浏览器是如何加载（渲染）html的？"><a href="#浏览器是如何加载（渲染）html的？" class="headerlink" title="浏览器是如何加载（渲染）html的？"></a>浏览器是如何加载（渲染）html的？</h2><p>浏览器在加载html的时候是自上而下渲染的，具体的步骤如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>) 解析HTML结构。</div><div class="line">(<span class="number">2</span>) 加载外部脚本和样式表文件。</div><div class="line">(<span class="number">3</span>) 解析并执行脚本代码。</div><div class="line">(<span class="number">4</span>) 构造HTML DOM模型。//js:DOMContentLoaded; jq:ready</div><div class="line">(<span class="number">5</span>) 加载图片等外部文件。</div><div class="line">(<span class="number">6</span>) 页面加载完毕。//js:onload; jq:load</div></pre></td></tr></table></figure>
<p>弹出1、3可以看出来来是自上而下的，第一次弹出的是null说明DOM还没渲染完成，找不到对应的标签。第三次能正常弹出是DOM对象，说明DOM树已经加载完可以找到对应的标签。第二次和第四次是添加了一些事件，在DOM渲染的过程触发对应的事件执行。从弹出的内容和先后顺序可以看出 DOMContentLoaded 是在DOM结构加载完毕触发的。之后出现了图片，最后弹出第二个，说明 onload 是页面资源（包括图像、脚本文件、CSS 文件等）加载完毕才弹出的。通过这样一个小例子彻底的掌握了浏览器加载html的全过程。jquery 中的ready和load的的实现也是通过封装 DOMContentLoaded和onload 来实现的他做了一层兼容处理。</p>
<p>事件DOMContentLoaded和load的区别：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DOMContentLoaded 是在DOM结构加载完毕触发的；</div><div class="line">load 是页面资源（包括图像、脚本文件、CSS 文件等）加载完毕才弹出的</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;当访问一个网站的时候需要加载html，一个完整的html结构包含：dom树、文档、图片和媒体资源、样式css资源和脚本js资源。然后我们提出一个疑问:浏览器是如何加载（渲染）html的？&lt;/p&gt;
    
    </summary>
    
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>CSS print 样式</title>
    <link href="http://yoursite.com/2017/07/17/CSS%20prin/"/>
    <id>http://yoursite.com/2017/07/17/CSS prin/</id>
    <published>2017-07-16T16:00:00.000Z</published>
    <updated>2017-07-21T05:22:30.761Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>显示器(screen)和打印机(printer)是两种差别很大的设备,所以从浏览器里看到的页面,打印出来也许和你看到的样子有很大的差距。screen一般使用逻辑单位比如px,而打印机则应该使用物理单位比如cm或in。我们常见的A4纸张大小在不同DPI的显示器上显示的大小是不同的。因此如果要精确的控制打印效果就应该使用print css，这是跨平台兼容的标准。</p>
<p>web打印还有一种解决方式是生成pdf格式文件,客户端下载来打印,这也是不错的一种打印方式,因为pdf本身就是一种打印标准,可以做到精确控制。可以使用<a href="https://parall.ax/products/jspdf" target="_blank" rel="external">jsPDF</a>在客户端动态生成pdf,也可以在服务器端使用一些组件生成pdf后传送给客户端。当然首选还是使用print css来实现打印。</p>
<a id="more"></a>
<h2 id="引入print-css"><a href="#引入print-css" class="headerlink" title="引入print css"></a>引入print css</h2><ul>
<li>使用link标签就像通常在html页面中引入样式表一样,不过附加一个额外的media属性,如下面这样:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"print.css"</span> media=<span class="string">"print"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>表明print.css样式表是用于打印的</p>
<ul>
<li>使用@media规则可以在通用的样式表中,使用@media规则指定样式用于打印,比如这样:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@media print selector &#123;</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>或者</p>
<ul>
<li>css 代码:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@media print &#123;</span></div><div class="line">    selector&#123;</div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>使用@import规则在通用的样式表中导入打印样式表,有两种形式,其本质是一样的。</p>
<ul>
<li><p>css 代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@import url(print-style.css) print;</span></div></pre></td></tr></table></figure>
</li>
<li><p>html 代码:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style type="text/css"&gt;</div><div class="line">    @import url(print-style.css) print;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>使用link标签要比使用@import规则性能更好。</p>
<h2 id="度量单位"><a href="#度量单位" class="headerlink" title="度量单位"></a>度量单位</h2><p>显示时一般使用px,em或pt等逻辑单位,但在打印时要使用物理单位,比如cm或in(英寸)。对于常见的DPI(Dot Per Inch)为96的screen,px与cm的换算关系如下：</p>
<p>1 inch = 2.54 cm</p>
<p>1cm = 96/2.54 ≈ 37.80 px</p>
<p>1px = 2.54/96 ≈ 0.0265 cm</p>
<p>100px = 2.65 cm</p>
<p>A4纸的标准尺寸为:</p>
<p>21.0cm * 29.7 cm</p>
<p>在96DPI分辨率下,其对应的像素尺寸大约为:</p>
<p>794px * 1123px</p>
<p>因为不同的DPI下,其对应的像素尺寸是不同的,所以才要使用print css,使用物理单位来描述要打印的页面,这样打印效果就会一致了。</p>
<h2 id="page规则-at-rule"><a href="#page规则-at-rule" class="headerlink" title="@page规则(at-rule)"></a>@page规则(at-rule)</h2><p>@page 规则用于指定打印页面的一些属性,包括纸张尺寸,方向,页边距,分页等特性。其语法如下:</p>
<ul>
<li>css 代码:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@page :pseudo-class &#123;</span></div><div class="line">    size: A4 landscape;</div><div class="line">    margin:<span class="number">2</span>cm;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中伪类可以指定:</p>
<ul>
<li>page-break-before用于设置元素前面的分页行为,可取值:</li>
<li>auto默认值。如果必要则在元素前插入分页符。</li>
<li>always在元素前插入分页符。</li>
<li>avoid避免在元素前插入分页符。</li>
<li>left在元素之前足够的分页符，一直到一张空白的左页为止。</li>
<li>right在元素之前足够的分页符，一直到一张空白的右页为止。</li>
<li>inherit规定应该从父元素继承 page-break-before 属性的设置。</li>
<li>page-break-after设置元素后的分页行为。取值与page-break-before一样。</li>
<li>page-break-inside设置元素内部的分页行为。取值如下:</li>
<li>auto默认。如果必要则在元素内部插入分页符。</li>
<li>avoid避免在元素内部插入分页符。</li>
<li>inherit规定应该从父元素继承 page-break-inside 属性的设置</li>
</ul>
<p>比如:</p>
<ul>
<li>css 代码:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@media print &#123;</span></div><div class="line">    p &#123;orphans:<span class="number">3</span>; widows:<span class="number">2</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其他<br>1.对于页面上有显示而不想打印的内容,可以将其display设置为none来避免打印。<br>2.需要打印的内容尽量避免float,有些浏览器不会正确的打印浮动的内容。<br>3.可以调用window.print()函数来打印当前页面。<br>4.分页打印或换页打印：page- break-before和page-break-after CSS属性并不会修改网页在屏幕上的显示，这两个属性是用来控制文件的打印方式。每个打印属性都可以设定4种设定值：auto、always、left和 right。其中Auto是默认值，只有在有需要时，才需设定分页符号 (Page breaks)。page-break-before若设定成always，则是在遇到特定的组件时，打印机会重新开始一个新的打印页。page- break-before若设定成left，则会插入分页符号，直到指定的组件出现在一个左边的空白页上。page-break-before若设定成 right，则会插入分页符号，直到指定的组件出现在一个右边的空白页上。page-break-after属性会将分页符号加在指定组件后，而非之前。在下列程序中您将可以看到这些属性的设定。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><p>[1] <a href="http://edutechwiki.unige.ch/en/CSS_for_print_tutorial" target="_blank" rel="external">CSS for print tutorial</a><br>[2] <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@page" target="_blank" rel="external">@page</a><br>[3] <a href="http://www.w3school.com.cn/cssref/#print" target="_blank" rel="external">CSS 打印属性（Print）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;显示器(screen)和打印机(printer)是两种差别很大的设备,所以从浏览器里看到的页面,打印出来也许和你看到的样子有很大的差距。screen一般使用逻辑单位比如px,而打印机则应该使用物理单位比如cm或in。我们常见的A4纸张大小在不同DPI的显示器上显示的大小是不同的。因此如果要精确的控制打印效果就应该使用print css，这是跨平台兼容的标准。&lt;/p&gt;
&lt;p&gt;web打印还有一种解决方式是生成pdf格式文件,客户端下载来打印,这也是不错的一种打印方式,因为pdf本身就是一种打印标准,可以做到精确控制。可以使用&lt;a href=&quot;https://parall.ax/products/jspdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsPDF&lt;/a&gt;在客户端动态生成pdf,也可以在服务器端使用一些组件生成pdf后传送给客户端。当然首选还是使用print css来实现打印。&lt;/p&gt;
    
    </summary>
    
    
      <category term="print" scheme="http://yoursite.com/tags/print/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/16/hexo/"/>
    <id>http://yoursite.com/2017/07/16/hexo/</id>
    <published>2017-07-15T16:00:00.000Z</published>
    <updated>2017-07-21T05:22:30.690Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="hello word" scheme="http://yoursite.com/tags/hello-word/"/>
    
  </entry>
  
</feed>
